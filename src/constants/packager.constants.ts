export enum PACKAGER_TYPE {
  NPM = "NPM",
  PNPM = "PNPM",
  YARN = "YARN",
  BUN = "BUN",
}

/********************** INTERFACE *************************************************************************************************************/

/**
 * Interface defining commands for each package manager
 */
export interface IPackagerCommands {
  
  /** Install all dependencies (npm install) */
  install: string;

  /** Add package(s) (npm install <pkg>) */
  add: (packages: string) => string;

  /** Execute binary (npx <cmd>) */
  exec: (command: string) => string;

  /** Run package.json script (npm run <script>) */
  run: (script: string) => string;

  /** Lockfile name generated by this packager */
  lockfile: string;
}

/********************** NPM *************************************************************************************************************/

export class NpmCommands implements IPackagerCommands {
  install = "npm install";

  add(packages: string): string {
    return `npm install ${packages}`;
  }

  exec(command: string): string {
    return `npx ${command}`;
  }

  run(script: string): string {
    return `npm run ${script}`;
  }

  lockfile = "package-lock.json";
}

/********************** PNPM *************************************************************************************************************/

export class PnpmCommands implements IPackagerCommands {
  install = "pnpm install";

  add(packages: string): string {
    return `pnpm add ${packages}`;
  }

  exec(command: string): string {
    return `pnpm exec ${command}`;
  }

  //TODO: voir si besoin du run 
  run(script: string): string {
    return `pnpm run ${script}`;
  }

  lockfile = "pnpm-lock.yaml";
}

/********************** YARN *************************************************************************************************************/

export class YarnCommands implements IPackagerCommands {
  install = "yarn install";

  add(packages: string): string {
    return `yarn add ${packages}`;
  }

  exec(command: string): string {
    return `yarn  ${command}`;
  }

  run(script: string): string {
    return `yarn ${script}`;
  }

  lockfile = "yarn.lock";
}

/********************** BUN *************************************************************************************************************/

export class BunCommands implements IPackagerCommands {
  install = "bun install";

  add(packages: string): string {
    return `bun add ${packages}`;
  }

  exec(command: string): string {
    return `bunx ${command}`;
  }

  run(script: string): string {
    return `bun run ${script}`;
  }

  lockfile = "bun.lockb";
}

/********************** FACTORY *************************************************************************************************************/

export abstract class PackagerFactory {
  static getCommands(type: PACKAGER_TYPE): IPackagerCommands {
    switch (type) {
      case PACKAGER_TYPE.NPM:
        return new NpmCommands();
      case PACKAGER_TYPE.PNPM:
        return new PnpmCommands();
      case PACKAGER_TYPE.YARN:
        return new YarnCommands();
      case PACKAGER_TYPE.BUN:
        return new BunCommands();
      default:
        throw new Error(`Unsupported packager: ${type}`);
    }
  }
}
